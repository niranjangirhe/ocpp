{
    "openapi": "3.0.1",
    "info": {
        "title": "Api gateway",
        "description": "Api gateway",
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "https://example.domain.com/api-gateway",
            "description": "Generated server url"
        }
    ],
    "paths": {
        "/v1/authentication/operator/login": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Operator login",
                "description": "Logs in an operator using the operatorâ€™s username and password",
                "operationId": "operatorLogin",
                "parameters": [
                    {
                        "in": "header",
                        "name": "X-API-Key",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "API key for authentication"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OperatorLoginResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ValidationResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FieldValidationResponse"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponse"
                                },
                                "example": {
                                    "requestId": "3ztRixFIk7",
                                    "code": "api-gateway-403",
                                    "reason": "invalid.ticket",
                                    "message": "Invalid ticket",
                                    "httpStatusCode": 403
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponse"
                                },
                                "example": {
                                    "requestId": "uP6XD6gMcK",
                                    "code": "api-gateway-404",
                                    "reason": "entity.not.found",
                                    "message": "Entity not found",
                                    "httpStatusCode": 404,
                                    "errors": [
                                        {
                                            "code": "api-gateway-404",
                                            "reason": "billing.transaction.not.found",
                                            "message": "Billing transaction not found"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponse"
                                },
                                "example": {
                                    "requestId": "gmBLt3ozyq",
                                    "code": "api-gateway-500",
                                    "reason": "internal.error",
                                    "message": "Unknown error",
                                    "httpStatusCode": 500,
                                    "errors": [
                                        {
                                            "code": "api-gateway-500",
                                            "reason": "internal.error",
                                            "message": "Unknown error"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/chargers/{id}/status": {
            "get": {
                "tags": [
                    "Chargers"
                ],
                "summary": "Find charger status by id",
                "description": "Get details of charger status by its id",
                "operationId": "getChargerStatus",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ChargerStatusResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponse"
                                },
                                "example": {
                                    "requestId": "JQIwMeDDX0",
                                    "code": "api-gateway-403",
                                    "reason": "invalid.ticket",
                                    "message": "Invalid ticket",
                                    "httpStatusCode": 403
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponse"
                                },
                                "example": {
                                    "requestId": "nac5J8XH3M",
                                    "code": "api-gateway-404",
                                    "reason": "entity.not.found",
                                    "message": "Entity not found",
                                    "httpStatusCode": 404,
                                    "errors": [
                                        {
                                            "code": "api-gateway-404",
                                            "reason": "billing.transaction.not.found",
                                            "message": "Billing transaction not found"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponse"
                                },
                                "example": {
                                    "requestId": "Q26hqBttJD",
                                    "code": "api-gateway-500",
                                    "reason": "internal.error",
                                    "message": "Unknown error",
                                    "httpStatusCode": 500,
                                    "errors": [
                                        {
                                            "code": "api-gateway-500",
                                            "reason": "internal.error",
                                            "message": "Unknown error"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "dmsTicket": []
                    }
                ]
            }
        },
        "/v1/chargers/connectors/{connectorId}/remote-operations/stop-transaction": {
            "post": {
                "tags": [
                    "Charger Remote Operations"
                ],
                "summary": "Send unlock message",
                "description": "Send unlock message",
                "operationId": "unlockConnector",
                "parameters": [
                    {
                        "name": "connectorId",
                        "in": "path",
                        "description": "connectorId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": 2
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RawOperationResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ValidationResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FieldValidationResponse"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponse"
                                },
                                "example": {
                                    "requestId": "W11nRttUjF",
                                    "code": "api-gateway-403",
                                    "reason": "invalid.ticket",
                                    "message": "Invalid ticket",
                                    "httpStatusCode": 403
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponse"
                                },
                                "example": {
                                    "requestId": "AtMDCbj4GI",
                                    "code": "api-gateway-404",
                                    "reason": "entity.not.found",
                                    "message": "Entity not found",
                                    "httpStatusCode": 404,
                                    "errors": [
                                        {
                                            "code": "api-gateway-404",
                                            "reason": "billing.transaction.not.found",
                                            "message": "Billing transaction not found"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponse"
                                },
                                "example": {
                                    "requestId": "ZZqRnsKV47",
                                    "code": "api-gateway-500",
                                    "reason": "internal.error",
                                    "message": "Unknown error",
                                    "httpStatusCode": 500,
                                    "errors": [
                                        {
                                            "code": "api-gateway-500",
                                            "reason": "internal.error",
                                            "message": "Unknown error"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "dmsTicket": []
                    }
                ]
            }
        },
       "/v1/chargers/evses/{evseId}/remote-operations/start-transaction-by-card-number": {
            "patch": {
                "tags": [
                    "Charger Remote Operations"
                ],
                "summary": "Send start EVSE transaction command with card number",
                "description": "Sends a start EVSE transaction command using the driver's RFID card number",
                "operationId": "startEvseTransactionByCardNumber",
                "parameters": [
                    {
                        "name": "evseId",
                        "in": "path",
                        "description": "connectorId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": 2
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StartTransactionByCardNumberRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StartTransactionResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ValidationResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FieldValidationResponse"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponse"
                                },
                                "example": {
                                    "requestId": "zrEEMnCHwS",
                                    "code": "api-gateway-403",
                                    "reason": "invalid.ticket",
                                    "message": "Invalid ticket",
                                    "httpStatusCode": 403
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponse"
                                },
                                "example": {
                                    "requestId": "dffkFP6a0d",
                                    "code": "api-gateway-404",
                                    "reason": "entity.not.found",
                                    "message": "Entity not found",
                                    "httpStatusCode": 404,
                                    "errors": [
                                        {
                                            "code": "api-gateway-404",
                                            "reason": "billing.transaction.not.found",
                                            "message": "Billing transaction not found"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponse"
                                },
                                "example": {
                                    "requestId": "zIv7AD22Yv",
                                    "code": "api-gateway-500",
                                    "reason": "internal.error",
                                    "message": "Unknown error",
                                    "httpStatusCode": 500,
                                    "errors": [
                                        {
                                            "code": "api-gateway-500",
                                            "reason": "internal.error",
                                            "message": "Unknown error"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "dmsTicket": []
                    }
                ]
            }
        },
        "/v1/ev-transactions/last": {
            "post": {
                "tags": [
                    "EV Transactions"
                ],
                "summary": "Find last ev transactions for chargers",
                "description": "Find last ev transactions for chargers",
                "operationId": "getLastEvTransactions",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChargersLastUsed"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EvTransactionResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ValidationResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FieldValidationResponse"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponse"
                                },
                                "example": {
                                    "requestId": "AEUrYFPhI3",
                                    "code": "api-gateway-403",
                                    "reason": "invalid.ticket",
                                    "message": "Invalid ticket",
                                    "httpStatusCode": 403
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponse"
                                },
                                "example": {
                                    "requestId": "XOUDegJLMB",
                                    "code": "api-gateway-404",
                                    "reason": "entity.not.found",
                                    "message": "Entity not found",
                                    "httpStatusCode": 404,
                                    "errors": [
                                        {
                                            "code": "api-gateway-404",
                                            "reason": "billing.transaction.not.found",
                                            "message": "Billing transaction not found"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponse"
                                },
                                "example": {
                                    "requestId": "zo2kdqItrY",
                                    "code": "api-gateway-500",
                                    "reason": "internal.error",
                                    "message": "Unknown error",
                                    "httpStatusCode": 500,
                                    "errors": [
                                        {
                                            "code": "api-gateway-500",
                                            "reason": "internal.error",
                                            "message": "Unknown error"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "dmsTicket": []
                    }
                ]
            }
        },
        "/v1/chargers/{id}/profile": {
            "get": {
                "tags": [
                    "Chargers"
                ],
                "summary": "Get chargerâ€™s profile details",
                "description": "Gets a chargerâ€™s profile details",
                "operationId": "getChargerProfile",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": 1
                    },
                    {
                        "name": "requestedFields",
                        "in": "query",
                        "description": "The returned response values:\n* CAPTION",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ChargerProfileResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ValidationResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FieldValidationResponse"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponse"
                                },
                                "example": {
                                    "requestId": "TATNs3mHh2",
                                    "code": "api-gateway-403",
                                    "reason": "invalid.ticket",
                                    "message": "Invalid ticket",
                                    "httpStatusCode": 403
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponse"
                                },
                                "example": {
                                    "requestId": "xfj1hKyswN",
                                    "code": "api-gateway-404",
                                    "reason": "entity.not.found",
                                    "message": "Entity not found",
                                    "httpStatusCode": 404,
                                    "errors": [
                                        {
                                            "code": "api-gateway-404",
                                            "reason": "billing.transaction.not.found",
                                            "message": "Billing transaction not found"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponse"
                                },
                                "example": {
                                    "requestId": "L9S3Dp96No",
                                    "code": "api-gateway-500",
                                    "reason": "internal.error",
                                    "message": "Unknown error",
                                    "httpStatusCode": 500,
                                    "errors": [
                                        {
                                            "code": "api-gateway-500",
                                            "reason": "internal.error",
                                            "message": "Unknown error"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "dmsTicket": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Chargers"
                ],
                "summary": "Update charger's profile details",
                "description": "Updates a chargerâ€™s profile details",
                "operationId": "updateChargerProfile",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": 1
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChargerProfileUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ChargerProfileResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ValidationResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/FieldValidationResponse"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponse"
                                },
                                "example": {
                                    "requestId": "fa7Pot1pPn",
                                    "code": "api-gateway-403",
                                    "reason": "invalid.ticket",
                                    "message": "Invalid ticket",
                                    "httpStatusCode": 403
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponse"
                                },
                                "example": {
                                    "requestId": "kq837Des1N",
                                    "code": "api-gateway-404",
                                    "reason": "entity.not.found",
                                    "message": "Entity not found",
                                    "httpStatusCode": 404,
                                    "errors": [
                                        {
                                            "code": "api-gateway-404",
                                            "reason": "billing.transaction.not.found",
                                            "message": "Billing transaction not found"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponse"
                                },
                                "example": {
                                    "requestId": "VhWKqcdqiw",
                                    "code": "api-gateway-500",
                                    "reason": "internal.error",
                                    "message": "Unknown error",
                                    "httpStatusCode": 500,
                                    "errors": [
                                        {
                                            "code": "api-gateway-500",
                                            "reason": "internal.error",
                                            "message": "Unknown error"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "dmsTicket": []
                    }
                ]
            }
        },
    },
    "components": {
        "schemas": {
            "Message": {
                "required": [
                    "code",
                    "message",
                    "reason"
                ],
                "type": "object",
                "properties": {
                    "code": {
                        "title": "Code",
                        "type": "string",
                        "example": "string"
                    },
                    "reason": {
                        "title": "Reason",
                        "type": "string",
                        "example": "string"
                    },
                    "message": {
                        "title": "Message",
                        "type": "string",
                        "example": "string"
                    }
                }
            },
            "ChargersLastUsed": {
                "required": [
                    "chargerIds"
                ],
                "type": "object",
                "properties": {
                    "chargerIds": {
                        "title": "Charger IDs",
                        "maxItems": 20,
                        "minItems": 1,
                        "uniqueItems": true,
                        "type": "array",
                        "description": "The unique identifiers of the chargers",
                        "example": [
                            12,
                            58
                        ],
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                },
                "description": "The object used to find the last EV transactions on specific chargers"
            },
            "EvTransactionResponse": {
                "required": [
                    "code",
                    "count",
                    "data",
                    "httpStatusCode",
                    "message",
                    "reason",
                    "requestId"
                ],
                "type": "object",
                "properties": {
                    "requestId": {
                        "title": "Request id",
                        "type": "string",
                        "example": "1234567"
                    },
                    "code": {
                        "title": "Code",
                        "type": "string",
                        "example": "string"
                    },
                    "reason": {
                        "title": "Reason",
                        "type": "string",
                        "example": "string"
                    },
                    "message": {
                        "title": "Message",
                        "type": "string",
                        "example": "string"
                    },
                    "messages": {
                        "title": "List of additional messages",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Message"
                        }
                    },
                    "httpStatusCode": {
                        "title": "Http status code",
                        "type": "integer",
                        "format": "int32",
                        "example": 200
                    },
                    "count": {
                        "title": "Number of entities returned",
                        "type": "integer",
                        "format": "int32",
                        "example": 1
                    },
                    "data": {
                        "title": "Entities data",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EvTransaction"
                        }
                    }
                }
            },
            "ValidationResponse": {
                "required": [
                    "code",
                    "errors",
                    "httpStatusCode",
                    "message",
                    "reason",
                    "requestId"
                ],
                "type": "object",
                "properties": {
                    "requestId": {
                        "title": "Request id",
                        "type": "string",
                        "example": "1234567"
                    },
                    "code": {
                        "title": "Code",
                        "type": "string",
                        "example": "string"
                    },
                    "reason": {
                        "title": "Reason",
                        "type": "string",
                        "example": "string"
                    },
                    "message": {
                        "title": "Message",
                        "type": "string",
                        "example": "string"
                    },
                    "messages": {
                        "title": "List of additional messages",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Message"
                        }
                    },
                    "httpStatusCode": {
                        "title": "Http status code",
                        "type": "integer",
                        "format": "int32",
                        "example": 400
                    },
                    "errors": {
                        "title": "List of errors",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Message"
                        }
                    }
                }
            },
            "FieldValidation": {
                "required": [
                    "code",
                    "field",
                    "message",
                    "reason"
                ],
                "type": "object",
                "properties": {
                    "code": {
                        "title": "Code",
                        "type": "string",
                        "example": "string"
                    },
                    "reason": {
                        "title": "Reason",
                        "type": "string",
                        "example": "string"
                    },
                    "message": {
                        "title": "Message",
                        "type": "string",
                        "example": "string"
                    },
                    "field": {
                        "title": "Field",
                        "type": "string",
                        "example": "name"
                    }
                }
            },
            "FieldValidationResponse": {
                "required": [
                    "code",
                    "errors",
                    "httpStatusCode",
                    "message",
                    "reason",
                    "requestId"
                ],
                "type": "object",
                "properties": {
                    "requestId": {
                        "title": "Request id",
                        "type": "string",
                        "example": "1234567"
                    },
                    "code": {
                        "title": "Code",
                        "type": "string",
                        "example": "string"
                    },
                    "reason": {
                        "title": "Reason",
                        "type": "string",
                        "example": "string"
                    },
                    "message": {
                        "title": "Message",
                        "type": "string",
                        "example": "string"
                    },
                    "messages": {
                        "title": "List of additional messages",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Message"
                        }
                    },
                    "httpStatusCode": {
                        "title": "Http status code",
                        "type": "integer",
                        "format": "int32",
                        "example": 400
                    },
                    "errors": {
                        "title": "List of errors",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FieldValidation"
                        }
                    }
                }
            },
            "BaseResponse": {
                "required": [
                    "code",
                    "httpStatusCode",
                    "message",
                    "reason",
                    "requestId"
                ],
                "type": "object",
                "properties": {
                    "requestId": {
                        "title": "Request id",
                        "type": "string",
                        "example": "1234567"
                    },
                    "code": {
                        "title": "Code",
                        "type": "string",
                        "example": "string"
                    },
                    "reason": {
                        "title": "Reason",
                        "type": "string",
                        "example": "string"
                    },
                    "message": {
                        "title": "Message",
                        "type": "string",
                        "example": "string"
                    },
                    "messages": {
                        "title": "List of additional messages",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Message"
                        }
                    },
                    "httpStatusCode": {
                        "title": "Http status code",
                        "type": "integer",
                        "format": "int32",
                        "example": 200
                    }
                }
            },
            "ChargerProfileResponse": {
                "required": [
                    "count",
                    "data",
                    "httpStatusCode",
                    "requestId"
                ],
                "type": "object",
                "properties": {
                    "requestId": {
                        "title": "Request id",
                        "type": "string",
                        "example": "1234567"
                    },
                    "messages": {
                        "title": "List of additional messages",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Message"
                        }
                    },
                    "httpStatusCode": {
                        "title": "Http status code",
                        "type": "integer",
                        "format": "int32",
                        "example": 200
                    },
                    "count": {
                        "title": "Number of entities returned",
                        "type": "integer",
                        "format": "int32",
                        "example": 1
                    },
                    "data": {
                        "title": "Entities data",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ChargerProfile"
                        }
                    }
                }
            },
            "ChargerProfileUpdate": {
                "type": "object",
                "properties": {
                    "caption": {
                        "title": "Caption",
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string",
                        "description": "The name of the charger",
                        "example": "NCAN177DC1"
                    },
                    "identityKey": {
                        "title": "Identity key",
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string",
                        "description": "The identity key of the charger, which is used by the system to communicate with it",
                        "example": "S0000000009"
                    },
                    "externalId": {
                        "title": "External ID",
                        "maxLength": 50,
                        "minLength": 1,
                        "type": "string",
                        "description": "The unique identifier of the charger from an external source",
                        "example": "a1d2f"
                    },
                    "description": {
                        "title": "Description",
                        "maxLength": 2000,
                        "minLength": 1,
                        "type": "string",
                        "description": "A description of the charger",
                        "example": "Charger description"
                    },
                    "siteId": {
                        "title": "Site ID",
                        "type": "integer",
                        "description": "The unique identifier of the site",
                        "format": "int64",
                        "example": 12
                    },
                    "modelId": {
                        "title": "Model ID",
                        "type": "integer",
                        "description": "The unique identifier of the charger model",
                        "format": "int64",
                        "example": 4
                    },
                    "protocolId": {
                        "title": "Protocol ID",
                        "type": "integer",
                        "description": "The unique identifier of the charger model protocol",
                        "format": "int64",
                        "example": 123424
                    },
                    "serialNumber": {
                        "title": "Serial number",
                        "maxLength": 45,
                        "minLength": 1,
                        "type": "string",
                        "description": "The serial number of the charger used by OCPP",
                        "example": "NSQC442E-002077"
                    },
                    "additionalSerialNumber": {
                        "title": "Additional serial number",
                        "maxLength": 50,
                        "minLength": 1,
                        "type": "string",
                        "description": "Any additional serial number that is relevant",
                        "example": "A-12345"
                    },
                    "contactPersonId": {
                        "title": "Contact person ID",
                        "type": "integer",
                        "description": "The unique identifier of the contact person for the charger",
                        "format": "int64",
                        "example": 361345
                    },
                    "accessLevel": {
                        "title": "Access level",
                        "pattern": "(USE_SITE|PUBLIC|PRIVATE|TAXI_ONLY)",
                        "type": "string",
                        "description": "The access level of the charger. Options are:\n* USE_SITE\n* PUBLIC\n* PRIVATE\n* TAXI_ONLY",
                        "example": "PUBLIC"
                    },
                    "showIn3rdPartyFilter": {
                        "title": "Show in 3rd-party filter",
                        "type": "boolean",
                        "description": "Indicates whether the charger appears in 3rd-party filters, even if it is managed by the system",
                        "example": true
                    },
                    "hidden": {
                        "title": "Hidden",
                        "type": "boolean",
                        "description": "Indicates whether the charger is hidden from driver maps",
                        "example": true
                    },
                    "excluded": {
                        "title": "Excluded",
                        "type": "boolean",
                        "description": "Indicates whether the charger is excluded from charger analysis, meaning it will not be displayed in dashboards and reports",
                        "example": false
                    },
                    "disabled": {
                        "title": "Disabled",
                        "type": "boolean",
                        "description": "Indicates whether the charger is disabled. This means that it is hidden from driver maps and excluded from charger analysis.",
                        "example": true
                    },
                    "managed": {
                        "title": "Managed",
                        "type": "boolean",
                        "description": "Indicates whether the charger is managed by the system",
                        "example": false
                    },
                    "ignoreStatusNotifications": {
                        "title": "Ignore status notifications",
                        "type": "boolean",
                        "description": "Indicates whether incoming status notifications are ignored",
                        "example": true
                    },
                    "authenticationMethods": {
                        "title": "Authentication methods",
                        "uniqueItems": true,
                        "type": "array",
                        "description": "The authentication methods supported by the charger. Options are:\n* NONE\n* RFID_CLASSIC\n* SMS\n* APP\n* CALL\n* PARK_AND_CHARGE\n* RFID_DES_FIRE\n* PLUG_AND_CHARGE\n* DIRECT_PAYMENT\n* CONTACTLESS_CARD",
                        "example": [
                            "SMS"
                        ],
                        "items": {
                            "title": "Authentication methods",
                            "pattern": "(NONE|RFID_CLASSIC|SMS|APP|CALL|PARK_AND_CHARGE|RFID_DES_FIRE|PLUG_AND_CHARGE|DIRECT_PAYMENT|CONTACTLESS_CARD)",
                            "type": "string",
                            "description": "The authentication methods supported by the charger. Options are:\n* NONE\n* RFID_CLASSIC\n* SMS\n* APP\n* CALL\n* PARK_AND_CHARGE\n* RFID_DES_FIRE\n* PLUG_AND_CHARGE\n* DIRECT_PAYMENT\n* CONTACTLESS_CARD",
                            "example": "[\"SMS\"]"
                        }
                    },
                    "paymentMethods": {
                        "title": "Payment methods",
                        "uniqueItems": true,
                        "type": "array",
                        "description": "The payment methods supported by the charger. Options are:\n* FREE\n* CARD\n* PARK_ANDA_CHARGE\n* SMS\n* CALL\n* CONTRACT\n* PLUG_AND_CHARGE",
                        "example": [
                            "SMS"
                        ],
                        "items": {
                            "title": "Payment methods",
                            "pattern": "(FREE|CARD|PARK_AND_CHARGE|SMS|CALL|CONTRACT|PLUG_AND_CHARGE)",
                            "type": "string",
                            "description": "The payment methods supported by the charger. Options are:\n* FREE\n* CARD\n* PARK_ANDA_CHARGE\n* SMS\n* CALL\n* CONTRACT\n* PLUG_AND_CHARGE",
                            "example": "[\"SMS\"]"
                        }
                    },
                    "authenticationMode": {
                        "title": "Authentication mode",
                        "pattern": "(SERVER_AUTHENTICATION|FREE_VEND)",
                        "type": "string",
                        "description": "The authentication mode. Options are:\n* SERVER_AUTHENTICATION\n* FREE_VEND",
                        "example": "SERVER_AUTHENTICATION"
                    },
                    "equipmentId": {
                        "title": "Equipment ID",
                        "maxLength": 250,
                        "minLength": 1,
                        "type": "string",
                        "description": "The equipment ID",
                        "example": "223"
                    },
                    "controllerId": {
                        "title": "Controller ID",
                        "maxLength": 250,
                        "minLength": 1,
                        "type": "string",
                        "description": "The controller ID",
                        "example": "S0000000009"
                    },
                    "erpId": {
                        "title": "ERP ID",
                        "maxLength": 50,
                        "minLength": 1,
                        "type": "string",
                        "description": "The identifier of the charger in the ERP system",
                        "example": "12"
                    },
                    "costCenter": {
                        "title": "Cost center",
                        "maxLength": 50,
                        "minLength": 1,
                        "type": "string",
                        "description": "The cost center of the charger",
                        "example": "B-CH"
                    },
                    "infrastructureCompanyId": {
                        "title": "Infrastructure company ID",
                        "type": "integer",
                        "description": "The unique identifier of the infrastructure operator",
                        "format": "int64",
                        "example": 21
                    },
                    "utilityCompanyId": {
                        "title": "Utility company ID",
                        "type": "integer",
                        "description": "The unique identifier of the utility company that services the charger",
                        "format": "int64",
                        "example": 35
                    }
                },
                "description": "The object used to update a charger profile"
            },
            "ChargerProfile": {
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Charger ID",
                        "type": "integer",
                        "description": "The unique identifier of the charger",
                        "format": "int64",
                        "example": 122345
                    },
                    "identityKey": {
                        "title": "Identity key",
                        "type": "string",
                        "description": "The identity key of the charger, which is used by the system to communicate with it",
                        "example": "S0000000009"
                    },
                    "caption": {
                        "title": "Caption",
                        "type": "string",
                        "description": "The name of the charger",
                        "example": "NCAN177DC1"
                    },
                    "description": {
                        "title": "Description",
                        "type": "string",
                        "description": "A description of the charger",
                        "example": "Charger description"
                    },
                    "externalId": {
                        "title": "External ID",
                        "type": "string",
                        "description": "The unique identifier of the charger from an external source",
                        "example": "a1d2f"
                    },
                    "chargerHostId": {
                        "title": "Charger host ID",
                        "type": "integer",
                        "description": "The unique identifier of the charger host",
                        "format": "int64",
                        "example": 673234
                    },
                    "siteId": {
                        "title": "Site ID",
                        "type": "integer",
                        "description": "The unique identifier of the site",
                        "format": "int64",
                        "example": 12
                    },
                    "modelId": {
                        "title": "Model ID",
                        "type": "integer",
                        "description": "The unique identifier of the charger model",
                        "format": "int64",
                        "example": 13
                    },
                    "additionalSerialNumber": {
                        "title": "Additional serial number",
                        "type": "string",
                        "description": "Any additional serial number that is relevant",
                        "example": "A-12345"
                    },
                    "contactPersonId": {
                        "title": "Contact person ID",
                        "type": "integer",
                        "description": "The unique identifier of the contact person for the charger",
                        "format": "int64",
                        "example": 361345
                    },
                    "accessLevel": {
                        "title": "Access level",
                        "type": "string",
                        "description": "The access level of the charger. Options are:\n* USE_SITE - use site access level\n* PUBLIC\n* PRIVATE\n* TAXI_ONLY",
                        "example": "PUBLIC"
                    },
                    "showIn3rdPartyFilter": {
                        "title": "Show in 3rd-party filter",
                        "type": "boolean",
                        "description": "Indicates whether the charger appears in 3rd-party filters, even if it is managed by the system",
                        "example": true
                    },
                    "hidden": {
                        "title": "Hidden",
                        "type": "boolean",
                        "description": "Indicates whether the charger is hidden from driver maps",
                        "example": true
                    },
                    "excluded": {
                        "title": "Excluded",
                        "type": "boolean",
                        "description": "Indicates whether the charger is excluded from charger analysis, meaning it will not be displayed in dashboards and reports",
                        "example": false
                    },
                    "disabled": {
                        "title": "Disabled",
                        "type": "boolean",
                        "description": "Indicates whether the charger is disabled. This means that it is hidden from driver maps and excluded from charger analysis.",
                        "example": true
                    },
                    "managed": {
                        "title": "Managed",
                        "type": "boolean",
                        "description": "Indicates whether the charger is managed by the system",
                        "example": false
                    },
                    "authenticationMode": {
                        "title": "Authentication mode",
                        "type": "string",
                        "description": "The authentication mode. Options are:\n* SERVER_AUTHENTICATION\n* FREE_VEND",
                        "example": "SERVER_AUTHENTICATION"
                    },
                    "authenticationMethods": {
                        "title": "Authentication methods",
                        "uniqueItems": true,
                        "type": "array",
                        "description": "The authentication methods supported by the charger. Options are: \n* NONE\n* RFID_CLASSIC\n* SMS\n* APP\n* CALL\n* PARK_AND_CHARGE\n* RFID_DES_FIRE\n* PLUG_AND_CHARGE\n* DIRECT_PAYMENT\n* CONTACTLESS_CARD",
                        "example": "SMS",
                        "items": {
                            "title": "Authentication methods",
                            "type": "string",
                            "description": "The authentication methods supported by the charger. Options are: \n* NONE\n* RFID_CLASSIC\n* SMS\n* APP\n* CALL\n* PARK_AND_CHARGE\n* RFID_DES_FIRE\n* PLUG_AND_CHARGE\n* DIRECT_PAYMENT\n* CONTACTLESS_CARD",
                            "example": "SMS"
                        }
                    },
                    "fundingSource": {
                        "title": "Funding source",
                        "type": "string",
                        "description": "The funding source or program for the charger. Options are:\n* BAAQMD\n* CA_SETTLEMENT\n* CA_SETTLEMENT_RND\n* CEC_2014\n* CEC_2015\n* CEC_2016\n* GREEN_MOUNTAIN_POWER\n* HOST_FUNDED\n* MBARD\n* NEDO\n* NNA_EVA\n* NNA_JMA\n* EVGO_FUNDED\n* SANBAG_2016\n* SCAQMD\n* VW_EA\n* TBD",
                        "example": "HOST_FUNDED"
                    },
                    "paymentMethods": {
                        "title": "Payment methods",
                        "uniqueItems": true,
                        "type": "array",
                        "description": "The payment methods supported by the charger. Options are:\n* FREE\n* CARD\n* PARK_AND_CHARGE\n* SMS\n* CALL\n* CONTRACT\n* PLUG_AND_CHARGE",
                        "example": "PARK_AND_CHARGE",
                        "items": {
                            "title": "Payment methods",
                            "type": "string",
                            "description": "The payment methods supported by the charger. Options are:\n* FREE\n* CARD\n* PARK_AND_CHARGE\n* SMS\n* CALL\n* CONTRACT\n* PLUG_AND_CHARGE",
                            "example": "PARK_AND_CHARGE"
                        }
                    },
                    "ignoreStatusNotifications": {
                        "title": "Ignore status notifications",
                        "type": "boolean",
                        "description": "Indicates whether incoming status notifications are ignored",
                        "example": true
                    },
                    "inMaintenance": {
                        "title": "In maintenance",
                        "type": "boolean",
                        "description": "Indicates whether the charger is in maintenance",
                        "example": true
                    },
                    "status": {
                        "title": "Status",
                        "type": "string",
                        "description": "The charger status. Options are:\n* AVAILABLE\n* OCCUPIED\n* FAULTED\n* UNAVAILABLE\n* NEW\n* UNKNOWN\n* RESERVED\n* IN_PROVISION\n* CHARGING\n* DISCHARGING\n* PAUSED\n* PREPARING\n* FINISHING",
                        "example": "UNAVAILABLE"
                    },
                    "provisionStatus": {
                        "title": "provisionStatus",
                        "type": "string",
                        "description": "\n* Specifies the charger current provision status\n* ORDERED\n* IN_STOCK\n* READY_FOR_INSTALLATION\n* INSTALLED\n* CONNECTED\n* READY_FOR_PROVISIONING\n* PROVISIONED\n* SCHEDULED_FOR_DECOMMISSIONING\n* DECOMMISSIONED\n* DENETWORKED\n* IN_CONSTRUCTION\n* IN_INSTALLATION",
                        "example": "UNAVAILABLE"
                    },
                    "serialNumber": {
                        "title": "Serial number",
                        "type": "string",
                        "description": "The serial number of the charger used by OCPP",
                        "example": "NSQC442E-002077"
                    },
                    "controllerId": {
                        "title": "Controller ID",
                        "type": "string",
                        "description": "The controller ID",
                        "example": "S0000000009"
                    },
                    "erpId": {
                        "title": "ERP ID",
                        "type": "string",
                        "description": "The identifier of the charger in the ERP system",
                        "example": "12"
                    },
                    "equipmentId": {
                        "title": "Equipment ID",
                        "type": "string",
                        "description": "The equipment ID",
                        "example": "223"
                    },
                    "costCenter": {
                        "title": "Cost center",
                        "type": "string",
                        "description": "The cost center of the charger",
                        "example": "B-CH"
                    },
                    "chargingSpeed": {
                        "title": "Charge speed",
                        "type": "string",
                        "description": "The speed of the charger. Options are:\n* SLOW\n* SEMI_FAST\n* FAST\n* ULTRA_FAST",
                        "example": "FAST"
                    },
                    "usageStartDate": {
                        "title": "Usage start date",
                        "type": "integer",
                        "description": "The date the charger started being used, in epoch time",
                        "format": "int64",
                        "example": 1617010000
                    },
                    "lastFirmwareUpdateDate": {
                        "title": "Last firmware update date",
                        "type": "integer",
                        "description": "The date of the last firmware update, in epoch time",
                        "format": "int64",
                        "example": 1217010000
                    },
                    "evses": {
                        "title": "EVSEs",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Evse"
                        }
                    },
                    "infrastructureCompany": {
                        "$ref": "#/components/schemas/Company"
                    },
                    "utilityCompany": {
                        "$ref": "#/components/schemas/Company"
                    },
                    "groupIds": {
                        "title": "Group IDs",
                        "uniqueItems": true,
                        "type": "array",
                        "description": "The IDs of groups that include this charger",
                        "example": [
                            1,
                            3,
                            5
                        ],
                        "items": {
                            "title": "Group IDs",
                            "type": "integer",
                            "description": "The IDs of groups that include this charger",
                            "format": "int64"
                        }
                    },
                    "customerAccountNumbers": {
                        "title": "Customer account numbers",
                        "uniqueItems": true,
                        "type": "array",
                        "description": "The account numbers of customers that can charge on this charger",
                        "example": [
                            361345,
                            45635
                        ],
                        "items": {
                            "title": "Customer account numbers",
                            "type": "integer",
                            "description": "The account numbers of customers that can charge on this charger",
                            "format": "int32"
                        }
                    }
                }
            },
            "Company": {
                "title": "Company details",
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Company ID",
                        "type": "integer",
                        "description": "The unique identifier of the company",
                        "format": "int64",
                        "example": 122345
                    },
                    "name": {
                        "title": "Company name",
                        "type": "string",
                        "description": "The name of the company",
                        "example": "Bezeq Int."
                    },
                    "businessId": {
                        "title": "Business id",
                        "type": "string",
                        "description": "Business id",
                        "example": "hEZPtUJFDBMNBab"
                    },
                    "code": {
                        "title": "Company code",
                        "type": "string",
                        "description": "The company code",
                        "example": "33221"
                    },
                    "phoneNumber": {
                        "title": "Company phone number",
                        "type": "string",
                        "description": "The phone number of the company",
                        "example": "*0144"
                    },
                    "type": {
                        "title": "Company type",
                        "type": "string",
                        "description": "* Specifies the company type\n* UNKNOWN\n* INSTALLER\n* MANUFACTURER\n* STATION_HOST\n* PROPERTY_OWNER\n* UTILITY_COMPANY\n* RFID_CARD_SUPPLIER\n* WIRELESS_CARRIER\n* SERVICE_PROVIDER\n* SERVICE_COMPANY\n* OEM\n* PROPERTY_OWNER_FREEDOM_STATION\n* BUILDING_OWNER\n* BUILDING_OWNER_FREEDOM_STATION\n* CONTRACTOR\n* EV_DRIVER\n* RETAIL_PROPERTY\n* TENANT\n* AUTO_DEALERSHIP\n* PROJECT_COMPANY",
                        "example": "INSTALLER"
                    },
                    "address": {
                        "$ref": "#/components/schemas/Address"
                    },
                    "contactPeople": {
                        "title": "Contact person details",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ContactPerson"
                        }
                    },
                    "invoiceLogoFileName": {
                        "title": "Invoice logo file name",
                        "type": "string",
                        "description": "Invoice logo file name",
                        "example": "logo.png"
                    },
                    "accountManagerId": {
                        "title": "Account manager id",
                        "type": "integer",
                        "description": "Account manager id",
                        "format": "int64",
                        "example": 123
                    },
                    "faxNumber": {
                        "title": "Fax number",
                        "type": "string",
                        "description": "Fax number",
                        "example": "+972548796315"
                    },
                    "hotlineFaxNumber": {
                        "title": "Hotline fax number",
                        "type": "string",
                        "description": "Hotline fax number",
                        "example": "+972548796315"
                    },
                    "hotlinePhoneNumber": {
                        "title": "Hotline phone number",
                        "type": "string",
                        "description": "Hotline phone number",
                        "example": "+972548796315"
                    },
                    "websiteUrl": {
                        "title": "Website url",
                        "type": "string",
                        "description": "Website url",
                        "example": "www.example.com"
                    },
                    "email": {
                        "title": "Email",
                        "type": "string",
                        "description": "Company Email",
                        "example": "example@gmial.com"
                    },
                    "nameOnInvoice": {
                        "title": "Name on invoice",
                        "type": "string",
                        "description": "Name on invoice",
                        "example": "Israel Israeli"
                    },
                    "taxIdNumber": {
                        "title": "Tax ID",
                        "type": "string",
                        "description": "Tax id number",
                        "example": "123"
                    }
                }
            },
            "Address": {
                "title": "Billing address details",
                "type": "object",
                "properties": {
                    "address1": {
                        "title": "Address",
                        "type": "string",
                        "example": "Haharash 4"
                    },
                    "address2": {
                        "title": "Address2",
                        "type": "string",
                        "example": "Bldg D Mail Drop: D303"
                    },
                    "city": {
                        "title": "City",
                        "type": "string",
                        "example": "Hod Hasharon"
                    },
                    "zipCode": {
                        "title": "Zipcode",
                        "type": "string",
                        "example": "2134456"
                    },
                    "countryCode": {
                        "title": "Country code",
                        "type": "string",
                        "example": "ISR"
                    },
                    "stateCode": {
                        "title": "USA state code",
                        "type": "string",
                        "example": "NY"
                    },
                    "zoneId": {
                        "title": "Timezone id",
                        "type": "string",
                        "example": "America/New_York"
                    },
                    "market": {
                        "title": "Market",
                        "type": "string",
                        "example": "JACKSONVILLE - 525"
                    },
                    "municipality": {
                        "title": "Municipality",
                        "type": "string",
                        "example": "Worcester"
                    },
                    "region": {
                        "title": "Region",
                        "type": "string",
                        "example": "South Atlantic"
                    },
                    "houseNumber": {
                        "title": "House number",
                        "type": "string",
                        "example": "12A"
                    }
                }
            },
            "ContactPerson": {
                "type": "object",
                "properties": {
                    "id": {
                        "title": "ID",
                        "type": "integer",
                        "description": "The unique identifier of the contact person",
                        "format": "int64",
                        "example": 111
                    },
                    "firstName": {
                        "title": "First name",
                        "type": "string",
                        "description": "The first name of the contact person",
                        "example": "John"
                    },
                    "lastName": {
                        "title": "Last name",
                        "type": "string",
                        "description": "The last name of the contact person",
                        "example": "Doe"
                    },
                    "mobilePhoneNumber": {
                        "title": "Mobile phone number",
                        "type": "string",
                        "description": " The mobile phone number of the contact person",
                        "example": "+972541234568"
                    },
                    "email": {
                        "title": "Email",
                        "type": "string",
                        "description": "The email address of the contact person",
                        "example": "john.doe@driivz.com"
                    },
                    "shippingAddress": {
                        "$ref": "#/components/schemas/Address"
                    },
                    "billingAddress": {
                        "$ref": "#/components/schemas/Address"
                    },
                    "companies": {
                        "title": "Companies",
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ContactPersonCompany"
                        }
                    }
                }
            },
            "ContactPersonCompany": {
                "title": "Companies",
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Company ID",
                        "type": "integer",
                        "description": "The unique identifier of the company that the contact person is associated with",
                        "format": "int64",
                        "example": 122345
                    }
                }
            },
            "ChargerStatusResponse": {
                "required": [
                    "code",
                    "count",
                    "data",
                    "httpStatusCode",
                    "message",
                    "reason",
                    "requestId"
                ],
                "type": "object",
                "properties": {
                    "requestId": {
                        "title": "Request id",
                        "type": "string",
                        "example": "1234567"
                    },
                    "code": {
                        "title": "Code",
                        "type": "string",
                        "example": "string"
                    },
                    "reason": {
                        "title": "Reason",
                        "type": "string",
                        "example": "string"
                    },
                    "message": {
                        "title": "Message",
                        "type": "string",
                        "example": "string"
                    },
                    "messages": {
                        "title": "List of additional messages",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Message"
                        }
                    },
                    "httpStatusCode": {
                        "title": "Http status code",
                        "type": "integer",
                        "format": "int32",
                        "example": 200
                    },
                    "count": {
                        "title": "Number of entities returned",
                        "type": "integer",
                        "format": "int32",
                        "example": 1
                    },
                    "data": {
                        "title": "Entities data",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ChargerStatus"
                        }
                    }
                }
            },
            "RawOperationResponse": {
                "required": [
                    "code",
                    "count",
                    "data",
                    "httpStatusCode",
                    "message",
                    "reason",
                    "requestId"
                ],
                "type": "object",
                "properties": {
                    "requestId": {
                        "title": "Request id",
                        "type": "string",
                        "example": "1234567"
                    },
                    "code": {
                        "title": "Code",
                        "type": "string",
                        "example": "string"
                    },
                    "reason": {
                        "title": "Reason",
                        "type": "string",
                        "example": "string"
                    },
                    "message": {
                        "title": "Message",
                        "type": "string",
                        "example": "string"
                    },
                    "messages": {
                        "title": "List of additional messages",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Message"
                        }
                    },
                    "httpStatusCode": {
                        "title": "Http status code",
                        "type": "integer",
                        "format": "int32",
                        "example": 200
                    },
                    "count": {
                        "title": "Number of entities returned",
                        "type": "integer",
                        "format": "int32",
                        "example": 1
                    },
                    "data": {
                        "title": "Entities data",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RawOperation"
                        }
                    }
                }
            },
            "StartTransaction": {
                "type": "object",
                "properties": {
                    "status": {
                        "title": "Status",
                        "type": "string",
                        "description": "The start transaction status. Options are:\n* SUCCESS\n* FAILURE\n* PENDING\n* REJECTED",
                        "example": "SUCCESS"
                    }
                }
            },
            "StartTransactionResponse": {
                "required": [
                    "count",
                    "data",
                    "httpStatusCode",
                    "requestId"
                ],
                "type": "object",
                "properties": {
                    "requestId": {
                        "title": "Request id",
                        "type": "string",
                        "example": "1234567"
                    },
                    "messages": {
                        "title": "List of additional messages",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Message"
                        }
                    },
                    "httpStatusCode": {
                        "title": "Http status code",
                        "type": "integer",
                        "format": "int32",
                        "example": 200
                    },
                    "count": {
                        "title": "Number of entities returned",
                        "type": "integer",
                        "format": "int32",
                        "example": 1
                    },
                    "data": {
                        "title": "Entities data",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StartTransaction"
                        }
                    }
                }
            },
            "StartTransactionByCardNumberRequest": {
                "required": [
                    "cardNumber",
                    "reason"
                ],
                "type": "object",
                "properties": {
                    "cardNumber": {
                        "title": "Card number",
                        "type": "string",
                        "description": "The number of the RFID card",
                        "example": "123123"
                    },
                    "reason": {
                        "title": "Reason",
                        "pattern": "(PAY_PER_USE|NO_CARD_YET|FORGOT_CARD|COURTESY_FREE_CHARGE|CARD_DOES_NOT_WORK|ISSUE_WITH_CARD_READER|CHARGER_WONT_RELEASE_THE_HANDLE|ISSUE_WITH_CHARGER)",
                        "type": "string",
                        "description": "The reason for sending the remote start command. Options are:\n* PAY_PER_USE\n* NO_CARD_YET\n* FORGOT_CARD\n* COURTESY_FREE_CHARGE\n* CARD_DOES_NOT_WORK\n* ISSUE_WITH_CARD_READER\n* CHARGER_WONT_RELEASE_THE_HANDLE\n* ISSUE_WITH_CHARGER",
                        "example": "PAY_PER_USE",
                        "enum": [
                            "PAY_PER_USE",
                            "NO_CARD_YET",
                            "FORGOT_CARD",
                            "COURTESY_FREE_CHARGE",
                            "CARD_DOES_NOT_WORK",
                            "ISSUE_WITH_CARD_READER",
                            "CHARGER_WONT_RELEASE_THE_HANDLE",
                            "ISSUE_WITH_CHARGER"
                        ]
                    }
                },
                "description": "Start transaction with card number message"
            },
            "EvTransaction": {
                "type": "object",
                "properties": {
                    "id": {
                        "title": "EV transaction ID",
                        "type": "integer",
                        "description": "The unique identifier of the EV transaction",
                        "format": "int64",
                        "example": 1
                    },
                    "connectorStatus": {
                        "title": "Connector status",
                        "type": "string",
                        "description": "The connector status. Options are:\n* AVAILABLE\n* CHARGING\n* FAULTED\n* UNAVAILABLE\n* NEW\n* UNKNOWN\n* RESERVED\n* DISCHARGING\n* PAUSED\n* PREPARING\n* FINISHING",
                        "example": "AVAILABLE"
                    },
                    "connectorType": {
                        "title": "Connector type",
                        "type": "string",
                        "description": "The connector type. Options are:\n* TYPE_2_MENNEKES\n* TYPE_4_CHADEMO\n* TYPE_F_SCHUKO_CEE_7_4_GER\n* TYPE_E_AND_F_CEE_7_5_FRA\n* TYPE_3_SCAME\n* TYPE_COMBO_GERMANY\n* TYPE_K_SECTION_107_2_D1_DEN\n* TYPE_C_CEE7_16_EU\n* TYPE_E_CEE_7_5_FRA\n* TYPE_C_CEE_7_17_GER_FRA\n* TYPE_L_CEI_23_16_VII_ITA\n* TYPE_J_SEV_1011_CH\n* TYPE_D_BS_546_2_PIN_UK\n* TYPE_D_BS_546_3_PIN_UK\n* TYPE_G_BS_1363_IS_401_AND_411_MS_58_UK\n* TYPE_1_J1772_YAZAKI\n* SAE_J1772_COMBO_US\n* SAE_J1772_AVCON\n* TESLA_UNIVERSAL_MOBILE_CONNECTOR\n* NEMA_1_15P\n* TYPE_B_NEMA_5_15\n* TYPE_B_NEMA_5_20\n* TESLA_R\n* TESLA_S\n* TYPE_2_TETHERED",
                        "example": "TYPE_2_MENNEKES"
                    },
                    "transactionStatus": {
                        "title": "Transaction status",
                        "type": "string",
                        "description": "The transaction status. Options are:\n* STARTED\n* UPDATED\n* STOPPED\n* BILLED",
                        "example": "STARTED"
                    },
                    "transactionBillingStatus": {
                        "title": "Transaction billing status",
                        "type": "string",
                        "description": "The billing status of the transaction. Options are:\n* NOT_BILLABLE\n* TEMP_COST\n* FINAL_COST\n* DICTATED_COST\n* EXCEEDED_BILLING_CALC_TIME_RANGE\n* FREE_CHARGE",
                        "example": "NOT_BILLABLE"
                    },
                    "stopReason": {
                        "title": "Stop reason",
                        "type": "string",
                        "description": "The reason the transaction was stopped. Options are:\n* EMERGENCY_STOP\n* EV_DISCONNECTED\n* HARD_RESET\n* LOCAL\n* OTHER\n* POWER_LOSS\n* REBOOT\n* REMOTE\n* SOFT_RESET\n* UNLOCK_COMMAND\n* DE_AUTHORIZED\n* ENERGY_LIMIT_REACHED\n* GROUND_FAULT\n* IMMEDIATE_RESET\n* MASTER_PASS\n* LOCAL_OUT_OF_CREDIT\n* OVERCURRENT_FAULT\n* POWER_QUALITY\n* SOC_LIMIT_REACHED\n* STOPPED_BY_EV\n* TIME_LIMIT_REACHED\n* TIMEOUT\n* MANUAL_STOP_CHARGE_BY_OPERATOR\n* CONCURRENT_CHARGING\n* BEFORE_RESERVATION",
                        "example": "EMERGENCY_STOP"
                    },
                    "corruptedReasons": {
                        "title": "Corrupted reasons",
                        "uniqueItems": true,
                        "type": "array",
                        "description": "The reasons for a corrupted transaction",
                        "example": "[CORRUPTED_BY_NEGATIVE_TRANSACTIONS]",
                        "items": {
                            "title": "Corrupted reasons",
                            "type": "string",
                            "description": "The reasons for a corrupted transaction",
                            "example": "[CORRUPTED_BY_NEGATIVE_TRANSACTIONS]"
                        }
                    },
                    "accountNumber": {
                        "title": "Account number",
                        "type": "integer",
                        "description": "The account number",
                        "format": "int32",
                        "example": 156798
                    },
                    "planId": {
                        "title": "Plan ID",
                        "type": "integer",
                        "description": "The unique identifier of the plan",
                        "format": "int64",
                        "example": 16
                    },
                    "chargePower": {
                        "title": "Charging power",
                        "type": "number",
                        "description": "The charging power, in kilowatts",
                        "format": "double",
                        "example": 50
                    },
                    "connectorId": {
                        "title": "Connector ID",
                        "type": "integer",
                        "description": "The unique identifier of the connector",
                        "format": "int64",
                        "example": 25
                    },
                    "meterReadOnStart": {
                        "title": "Meter read on start",
                        "type": "integer",
                        "description": "The meter reading when the transaction started",
                        "format": "int64",
                        "example": 2190
                    },
                    "meterReadOnStop": {
                        "title": "Meter read on stop",
                        "type": "integer",
                        "description": "The meter reading when the transaction stopped",
                        "format": "int64",
                        "example": 6470
                    },
                    "smart": {
                        "title": "Smart",
                        "type": "boolean",
                        "description": "Indicates whether smart charging was used",
                        "example": false
                    },
                    "startedOn": {
                        "title": "Started on",
                        "type": "integer",
                        "description": "The start date the transaction, in epoch time",
                        "format": "int64",
                        "example": 1500652138
                    },
                    "stoppedOn": {
                        "title": "Stopped on",
                        "type": "integer",
                        "description": "The end date the transaction, in epoch time",
                        "format": "int64",
                        "example": 1500653279
                    },
                    "chargeTime": {
                        "title": "Charge time",
                        "type": "integer",
                        "description": "The amount of time the vehicle was charging, in epoch time",
                        "format": "int64",
                        "example": 1500653279
                    },
                    "plugTimeInSeconds": {
                        "title": "Plug time",
                        "type": "integer",
                        "description": "The amount of time the vehicle was connected to the charger but not charging, in seconds",
                        "format": "int64",
                        "example": 561
                    },
                    "chargeEnergySupplyTimeInSeconds": {
                        "title": "Charger energy supply",
                        "type": "integer",
                        "description": "The amount of time the charger supplied energy to the vehicle, in seconds",
                        "format": "int64",
                        "example": 1500653279
                    },
                    "chargerId": {
                        "title": "Charger ID",
                        "type": "integer",
                        "description": "The unique identifier of the charger",
                        "format": "int64",
                        "example": 42
                    },
                    "vehicleSoc": {
                        "title": "Vehicle SoC",
                        "type": "number",
                        "description": "The state of charge of the vehicle",
                        "format": "double",
                        "example": 35
                    },
                    "planCode": {
                        "title": "Plan code",
                        "type": "string",
                        "description": "The unique name of the plan",
                        "example": "70154"
                    },
                    "cardId": {
                        "title": "Card ID",
                        "type": "integer",
                        "description": "The unique identifier of the card used to start the transaction",
                        "format": "int64",
                        "example": 245431
                    },
                    "cardNumber": {
                        "title": "Card number",
                        "type": "string",
                        "description": "The card number",
                        "example": "043D0752674F80"
                    },
                    "cardType": {
                        "title": "Card type",
                        "type": "string",
                        "description": "The type of card used to start the transaction",
                        "example": "RFID"
                    },
                    "billedTime": {
                        "title": "Billed time",
                        "type": "integer",
                        "description": "The time billed, in seconds",
                        "format": "int64",
                        "example": 1141
                    },
                    "totalChargingTime": {
                        "title": "Total charging time",
                        "type": "integer",
                        "description": "The time charged, in milli seconds",
                        "format": "int64",
                        "example": 65468
                    },
                    "totalEnergy": {
                        "title": "Total energy",
                        "type": "number",
                        "description": "The total amount of energy consumed in this transaction",
                        "example": 6.475
                    },
                    "tariffId": {
                        "title": "Tariff ID",
                        "type": "integer",
                        "description": "The unique identifier of the tariff",
                        "format": "int64",
                        "example": 2854
                    },
                    "chargerPublicKey": {
                        "title": "Charger public key",
                        "type": "string",
                        "description": "The public key of the charger",
                        "example": "MjM0MzI0"
                    },
                    "startMeterSignedData": {
                        "title": "Start meter signed data",
                        "type": "string",
                        "description": "The meter reading when the transaction started, as signed data"
                    },
                    "stopMeterSignedData": {
                        "title": "Stop meter signed data",
                        "type": "string",
                        "description": "The meter reading when the transaction stopped, as signed data"
                    },
                    "reservationId": {
                        "title": "Reservation ID",
                        "type": "integer",
                        "description": "The unique identifier of the reservation",
                        "format": "int64",
                        "example": 64955
                    },
                    "evseId": {
                        "title": "EVSE ID",
                        "type": "string",
                        "description": "The unique identifier of the EVSE",
                        "example": "US*EVG*E9*9"
                    },
                    "authorizationFailureReason": {
                        "title": "Authorization failure reason",
                        "type": "string",
                        "description": "The reason for the authorization failure",
                        "example": "NOT_ACTIVATED_CARD"
                    },
                    "accepted": {
                        "title": "Accepted",
                        "type": "boolean",
                        "description": "Indicates whether the transaction was accepted",
                        "example": true
                    },
                    "errorInfo": {
                        "$ref": "#/components/schemas/ErrorInfo"
                    },
                    "cost": {
                        "$ref": "#/components/schemas/Cost"
                    },
                    "chargerHost": {
                        "$ref": "#/components/schemas/ChargerHost"
                    },
                    "transactionUuid": {
                        "title": "Billing transaction UUID",
                        "type": "string",
                        "description": "The unique ID of the billing transaction",
                        "example": "2cc0724b-e3f9-4589-bc41-7f63f28d4a6b"
                    },
                    "startSource": {
                        "title": "Start source",
                        "type": "string",
                        "description": "The source of the start transaction command",
                        "example": "Station"
                    },
                    "stopSource": {
                        "title": "Stop source",
                        "type": "string",
                        "description": "The source of the stop transaction command",
                        "example": "Station"
                    },
                    "roaming": {
                        "$ref": "#/components/schemas/Roaming"
                    },
                    "ocpiSessions": {
                        "title": "OCPI sessions",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OcpiSession"
                        }
                    },
                    "hubjectSessions": {
                        "title": "Hubject sessions",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/HubjectSession"
                        }
                    }
                }
            },
            "HubjectSession": {
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Id",
                        "type": "integer",
                        "description": "id",
                        "format": "int64",
                        "example": 54
                    },
                    "sessionId": {
                        "title": "Session id",
                        "type": "string",
                        "description": "Session id",
                        "example": "session id"
                    },
                    "evcoId": {
                        "title": "Evco id",
                        "type": "string",
                        "description": "evco id",
                        "example": "evco id"
                    },
                    "rfid": {
                        "title": "Rfid",
                        "type": "string",
                        "description": "rfid",
                        "example": "id123"
                    }
                }
            },
            "OcpiSession": {
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Id",
                        "type": "integer",
                        "description": "id",
                        "format": "int64",
                        "example": 11
                    },
                    "sessionId": {
                        "title": "Session id",
                        "type": "string",
                        "description": "Session id",
                        "example": "session id"
                    },
                    "uId": {
                        "title": "UId",
                        "type": "string",
                        "description": "UId",
                        "example": "uId"
                    },
                    "rfid": {
                        "title": "Rfid",
                        "type": "string",
                        "description": "rfid",
                        "example": "id123"
                    }
                }
            },
            "Roaming": {
                "title": "Roaming",
                "type": "object",
                "properties": {
                    "cardProviderId": {
                        "title": "Roaming card provider id",
                        "type": "integer",
                        "format": "int32",
                        "example": 1
                    },
                    "cardProviderName": {
                        "title": "Roaming card provider name",
                        "type": "string",
                        "example": "Sosita"
                    }
                }
            },
            "ChargerStatus": {
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Charger ID",
                        "type": "integer",
                        "description": "The unique identifier of the charger",
                        "format": "int64",
                        "example": 122345
                    },
                    "externalId": {
                        "title": "External ID",
                        "type": "string",
                        "description": "The unique identifier of the charger from an external source",
                        "example": "a1d2f"
                    },
                    "chargerStatus": {
                        "title": "Charger status",
                        "type": "string",
                        "description": "The charger status. Options are:\n* AVAILABLE\n* OCCUPIED\n* FAULTED\n* UNAVAILABLE\n* NEW\n* UNKNOWN\n* RESERVED\n* IN_PROVISION\n* CHARGING\n* DISCHARGING\n* PAUSED\n* PREPARING\n* FINISHING",
                        "example": "AVAILABLE"
                    },
                    "temperatureScale": {
                        "title": "Temperature scale",
                        "type": "string",
                        "description": "The temperature scale. Options are:\n* CELSIUS\n* FAHRENHEIT",
                        "example": "CELSIUS"
                    },
                    "errorCode": {
                        "title": "Error code",
                        "type": "string",
                        "description": "The error on the charger. Options are:\n* OTHER_ERROR\n* CONNECTOR_LOCK_FAILURE\n* HIGH_TEMPERATURE\n* MODE_3_ERROR\n* NO_ERROR\n* POWER_METER_FAILURE\n* POWER_SWITCH_FAILURE\n* READER_FAILURE\n* EV_COMMUNICATION_ERROR\n* GROUND_FAILURE\n* INTERNAL_ERROR\n* LOCAL_LIST_CONFLICT\n* OVER_CURRENT_FAILURE\n* OVER_VOLTAGE\n* RESET_FAILURE\n* UNDER_VOLTAGE\n* WEAK_SIGNAL",
                        "example": "HIGH_TEMPERATURE"
                    },
                    "provisionStatus": {
                        "title": "Provisioning status",
                        "type": "string",
                        "description": "The provisioning status of the charger. Options are:\n* ORDERED\n* IN_STOCK\n* READY_FOR_INSTALLATION\n* INSTALLED\n* CONNECTED\n* READY_FOR_PROVISIONING\n* PROVISIONED\n* SCHEDULED_FOR_DECOMMISSIONING\n* DECOMMISSIONED\n* DENETWORKED\n* IN_CONSTRUCTION\n* IN_INSTALLATION",
                        "example": "ORDERED"
                    },
                    "firmwareVersion": {
                        "title": "Firmware version",
                        "type": "string",
                        "description": "The firmware version installed on the charger",
                        "example": "1.2.2 (Production)"
                    },
                    "versionCpu2": {
                        "title": "Version CPU2",
                        "type": "string",
                        "description": "The version of the CPU",
                        "example": "13"
                    },
                    "currentTemperature": {
                        "title": "Current temperature",
                        "type": "number",
                        "description": "The current temperature of the charger",
                        "example": 36.7
                    },
                    "installationDate": {
                        "title": "Installation date",
                        "type": "integer",
                        "description": "The date that the charger was installed, in epoch time",
                        "format": "int64",
                        "example": 1617010000
                    },
                    "updateStatus": {
                        "title": "Update status",
                        "type": "string",
                        "description": "The update status of the firmware. Options are:\n* INACTIVE\n* PLANNED\n* PENDING\n* DOWNLOADED\n* DOWNLOAD_FAILED\n* INSTALLED\n* INSTALLATION_FAILED\n* REQUEST_TIMED_OUT\n* DOWNLOADING\n* INSTALLING\n* DOWNLOAD_SCHEDULED\n* DOWNLOAD_PAUSED\n* INSTALL_REBOOTING\n* INSTALL_SCHEDULED\n* INSTALL_VERIFICATION_FAILED\n* INVALID_SIGNATURE\n* SIGNATURE_VERIFIED\n* PUBLISH_FAILED",
                        "example": "INACTIVE"
                    },
                    "provisioningDate": {
                        "title": "Provisioned date",
                        "type": "integer",
                        "description": "The date that the charger was provisioned, in epoch time",
                        "format": "int64",
                        "example": 1617010000
                    },
                    "decommissionDate": {
                        "title": "Decommissioned date",
                        "type": "integer",
                        "description": "The date that the charger was decomissioned, in epoch time",
                        "format": "int64",
                        "example": 1617010000
                    },
                    "groupIds": {
                        "title": "Group IDs",
                        "uniqueItems": true,
                        "type": "array",
                        "description": "The IDs of groups that include this charger",
                        "example": [
                            1,
                            3,
                            5
                        ],
                        "items": {
                            "title": "Group IDs",
                            "type": "integer",
                            "description": "The IDs of groups that include this charger",
                            "format": "int64"
                        }
                    },
                    "siteId": {
                        "title": "Site ID",
                        "type": "integer",
                        "description": "The unique identifier of the site",
                        "format": "int64",
                        "example": 1842
                    },
                    "evses": {
                        "title": "EVSEs",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Evse"
                        }
                    }
                }
            },
            "RawOperation": {
                "type": "object",
                "properties": {
                    "response": {
                        "title": "Response message",
                        "type": "string",
                        "example": "{\"status\":\"Accepted\"}"
                    }
                }
            },
            "ErrorInfo": {
                "title": "Error details",
                "type": "object",
                "properties": {
                    "errorCode": {
                        "title": "Error code",
                        "type": "string",
                        "description": "The error that occurred. The value is NO_ERROR if no error occurred.",
                        "example": "NO_ERROR"
                    },
                    "vendorErrorCode": {
                        "title": "Vendor error code",
                        "type": "string",
                        "description": "The vendor error code",
                        "example": "E-20"
                    },
                    "errorMessage": {
                        "title": "Error message",
                        "type": "string",
                        "description": "A free text field with more information about the error",
                        "example": "Error message"
                    }
                }
            },
            "Cost": {
                "title": "Cost details",
                "type": "object",
                "properties": {
                    "estimated": {
                        "title": "Estimated amount",
                        "type": "number",
                        "description": "The estimated amount of the transaction",
                        "example": 6.1
                    },
                    "currency": {
                        "title": "Currency",
                        "type": "string",
                        "description": "The currency of the transaction. Options are:\n* USD\n* EUR\n* GBP\n* NIS\n* HUF\n* CZK\n* RON\n* HRK\n* SEK\n* NOK\n* SKK\n* CLP\n* COP\n* JPY\n* ISK\n* INR\n* NZD\n* DKK\n* CAD\n* AED\n* CHF\n* PLN\n* RUB\n* AUD\n* BGN\n* THB\n* MXN",
                        "example": "USD"
                    },
                    "totalTax": {
                        "title": "Total tax",
                        "type": "number",
                        "description": "The total tax amount charged for the transaction",
                        "example": 2.25
                    },
                    "total": {
                        "title": "Total amount",
                        "type": "number",
                        "description": "The total amount charged for the transaction",
                        "example": 8.75
                    }
                }
            },
            "ChargerHost": {
                "title": "Charger host",
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Charger host ID",
                        "type": "integer",
                        "description": "The unique identifier of the charger host",
                        "format": "int64",
                        "example": 1
                    },
                    "name": {
                        "title": "Charger host name",
                        "type": "string",
                        "description": "The name of the charger host",
                        "example": "Antwerpen chargers"
                    }
                }
            },
            "LoginResponse": {
                "type": "object",
                "properties": {
                    "ticket": {
                        "title": "Ticket",
                        "type": "string",
                        "example": "12399b0e-v2908-4e32-9279-c47d9760124c"
                    }
                }
            },
            "OperatorLoginResponse": {
                "required": [
                    "code",
                    "count",
                    "data",
                    "httpStatusCode",
                    "message",
                    "reason",
                    "requestId"
                ],
                "type": "object",
                "properties": {
                    "requestId": {
                        "title": "Request id",
                        "type": "string",
                        "example": "1234567"
                    },
                    "code": {
                        "title": "Code",
                        "type": "string",
                        "example": "string"
                    },
                    "reason": {
                        "title": "Reason",
                        "type": "string",
                        "example": "string"
                    },
                    "message": {
                        "title": "Message",
                        "type": "string",
                        "example": "string"
                    },
                    "messages": {
                        "title": "List of additional messages",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Message"
                        }
                    },
                    "httpStatusCode": {
                        "title": "Http status code",
                        "type": "integer",
                        "format": "int32",
                        "example": 200
                    },
                    "count": {
                        "title": "Number of entities returned",
                        "type": "integer",
                        "format": "int32",
                        "example": 1
                    },
                    "data": {
                        "title": "Entities data",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LoginResponse"
                        }
                    }
                }
            },
            "Evse": {
                "title": "EVSEs",
                "type": "object",
                "properties": {
                    "identityKey": {
                        "title": "Identity key",
                        "type": "string",
                        "description": "The identity key of the charger, which is used by the system to communicate with it",
                        "example": "2"
                    },
                    "id": {
                        "title": "ID",
                        "type": "string",
                        "description": "The unique identifier of the EVSE",
                        "example": "US*XDC*E10*10"
                    },
                    "connectors": {
                        "title": "Connector details",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Connector"
                        }
                    }
                }
            },
            "Connector": {
                "title": "Connector details",
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Connector ID",
                        "type": "integer",
                        "description": "The unique identifier of the connector",
                        "format": "int64",
                        "example": 122345
                    },
                    "identityKey": {
                        "title": "Identity key",
                        "type": "string",
                        "description": "The identity key of the charger, which is used by the system to communicate with it",
                        "example": "GRDS0144"
                    },
                    "evseConnectorIdentityKey": {
                        "title": "EVSE connector identity key",
                        "type": "string",
                        "description": "The identifier of the connector. The identifier is unique only within the charger.",
                        "example": "1"
                    },
                    "name": {
                        "title": "Name",
                        "type": "string",
                        "description": "The name of the connector",
                        "example": "CHADEMO"
                    },
                    "serialNumber": {
                        "title": "Serial number",
                        "type": "string",
                        "description": "The serial number of the connector",
                        "example": "A-123"
                    },
                    "legacyId": {
                        "title": "Legacy ID",
                        "type": "string",
                        "description": "The legacy ID of the connector",
                        "example": "BC*DSA*E2*1"
                    },
                    "externalId": {
                        "title": "External ID",
                        "type": "string",
                        "description": "The identifier of the connector from an external source",
                        "example": "A-ER-021"
                    },
                    "ean": {
                        "title": "EAN",
                        "type": "string",
                        "description": "The manufacturer barcode number",
                        "example": "1023 4566"
                    },
                    "maxCurrent": {
                        "title": "Max current",
                        "type": "number",
                        "description": "The maximum current, in amps",
                        "example": 125
                    },
                    "maxPowerKw": {
                        "title": "Max power in Kw",
                        "type": "number",
                        "description": "The maximum power, in kilowatts",
                        "example": 50
                    },
                    "meterSerialNumber": {
                        "title": "Meter serial number",
                        "type": "string",
                        "description": "The serial number of the meter",
                        "example": "G-0762135"
                    },
                    "utilityMeterNumber": {
                        "title": "Utility meter serial number",
                        "type": "string",
                        "description": "The serial number of the utility meter",
                        "example": "MN-8756"
                    },
                    "ignoreStatusNotification": {
                        "title": "Ignore status notification",
                        "type": "boolean",
                        "description": "Indicates whether status notifications from the connector are ignored",
                        "example": false
                    },
                    "status": {
                        "title": "Connector status",
                        "type": "string",
                        "description": "The connector status. Options are:\n* AVAILABLE\n* CHARGING\n* FAULTED\n* UNAVAILABLE\n* NEW\n* UNKNOWN\n* RESERVED\n* DISCHARGING\n* PAUSED\n* PREPARING\n* FINISHING",
                        "example": "AVAILABLE"
                    },
                    "reservable": {
                        "title": "Reservable",
                        "type": "boolean",
                        "description": "Indicates whether the connector can be reserved",
                        "example": true
                    },
                    "revenueMargin": {
                        "title": "Revenue margin",
                        "type": "number",
                        "description": "The profit margin of the connector. This is for information only.",
                        "format": "double"
                    },
                    "teslaConnectionType": {
                        "title": "Tesla connection type",
                        "type": "string",
                        "description": "The type of Tesla connection, if there is one. Options are:\n* NONE\n* ADAPTER\n* CONNECTOR",
                        "example": "ADAPTER"
                    },
                    "teslaAdapterSerialNumber": {
                        "title": "Tesla adapter serial number",
                        "type": "string",
                        "description": "The serial number of the Tesla adapter",
                        "example": "TA-8675"
                    },
                    "teslaAdapterInstallationDate": {
                        "title": "Tesla adapter installation date",
                        "type": "integer",
                        "description": "The date the Tesla adapter was installed, in epoch time",
                        "format": "int64",
                        "example": 1640995200
                    },
                    "teslaAdapterInMaintenance": {
                        "title": "Tesla adapter in maintenance",
                        "type": "boolean",
                        "description": "Indicates whether the Tesla adapter is in maintenance",
                        "example": false
                    },
                    "teslaHasAdapter": {
                        "title": "Tesla adapter",
                        "type": "boolean",
                        "description": "Indicates whether the connector has a Tesla adaptor",
                        "example": false
                    },
                    "inMaintenance": {
                        "title": "In maintenance",
                        "type": "boolean",
                        "description": "Indicates whether the connector is in maintenance",
                        "example": false
                    },
                    "smartChargingEnabled": {
                        "title": "Smart charging enabled",
                        "type": "boolean",
                        "description": "Indicates whether the connector supports smart charging",
                        "example": true
                    },
                    "wiredPhase": {
                        "title": "Wired phase",
                        "type": "integer",
                        "description": "The number of the wired phase for a single-phase charger/connector",
                        "format": "int32",
                        "example": 1
                    },
                    "errorCode": {
                        "title": "Error code",
                        "type": "string",
                        "description": "The error on the connector. Options are:\n* OTHER_ERROR\n* CONNECTOR_LOCK_FAILURE\n* HIGH_TEMPERATURE\n* MODE_3_ERROR\n* NO_ERROR\n* POWER_METER_FAILURE\n* POWER_SWITCH_FAILURE\n* READER_FAILURE\n* EV_COMMUNICATION_ERROR\n* GROUND_FAILURE\n* INTERNAL_ERROR\n* LOCAL_LIST_CONFLICT\n* OVER_CURRENT_FAILURE\n* OVER_VOLTAGE\n* RESET_FAILURE\n* UNDER_VOLTAGE\n* WEAK_SIGNAL",
                        "example": "HIGH_TEMPERATURE"
                    },
                    "posChargingStatus": {
                        "title": "POS charging status",
                        "type": "string",
                        "description": "The charging status of the connector at the point of sale. Options are:\n* NONE\n* STARTING\n* CHARGING\n* STOPPING",
                        "example": "STARTING"
                    },
                    "errorMessage": {
                        "title": "Error message",
                        "type": "string",
                        "description": "A free text field with more information about the error message",
                        "example": "error message info"
                    },
                    "placement": {
                        "title": "Placement",
                        "type": "string",
                        "description": "The placement of the connector on the charger. Options are:\n* NOT_SPECIFIED\n* LEFT\n* RIGHT\n* TOP\n* BOTTOM\n* CENTER\n* OTHER",
                        "example": "LEFT"
                    },
                    "ratedFrequency": {
                        "title": "Rated frequency",
                        "type": "integer",
                        "description": "The frequency at which the connector is designed to operate",
                        "format": "int32",
                        "example": 60
                    },
                    "ratedVoltage": {
                        "title": "Rated voltage",
                        "type": "number",
                        "description": "The maximum voltage that the connector can operate at safely",
                        "example": 500
                    },
                    "qrCode": {
                        "title": "QR code",
                        "type": "string",
                        "description": "The URL for the website where the driver can swipe to start charging",
                        "example": "https://account.driivz.com/sendCharger/?chargerIdentityKey=XXX-NRG-111625-0127&connectorIdentityKey=1"
                    },
                    "cableLength": {
                        "title": "QR code",
                        "type": "integer",
                        "description": "The URL for the website where the driver can swipe to start charging",
                        "format": "int32"
                    },
                    "allowOverridePlan": {
                        "title": "Allow override plan",
                        "type": "boolean",
                        "description": "Indicates whether the tariff can be set at the charger level, overriding the plan tariff",
                        "example": true
                    },
                    "notes": {
                        "title": "Notes",
                        "type": "string",
                        "description": "A free text field with notes about the connector",
                        "example": "Connector color is red"
                    },
                    "connectorType": {
                        "title": "Connector type",
                        "type": "string",
                        "description": "The connector type. Options are:\n* TYPE_2_MENNEKES\n* TYPE_4_CHADEMO\n* TYPE_F_SCHUKO_CEE_7_4_GER\n* TYPE_E_AND_F_CEE_7_5_FRA\n* TYPE_3_SCAME\n* TYPE_COMBO_GERMANY\n* TYPE_K_SECTION_107_2_D1_DEN\n* TYPE_C_CEE7_16_EU\n* TYPE_E_CEE_7_5_FRA\n* TYPE_C_CEE_7_17_GER_FRA\n* TYPE_L_CEI_23_16_VII_ITA\n* TYPE_J_SEV_1011_CH\n* TYPE_D_BS_546_2_PIN_UK\n* TYPE_D_BS_546_3_PIN_UK\n* TYPE_G_BS_1363_IS_401_AND_411_MS_58_UK\n* TYPE_1_J1772_YAZAKI\n* SAE_J1772_COMBO_US\n* SAE_J1772_AVCON\n* TESLA_UNIVERSAL_MOBILE_CONNECTOR\n* NEMA_1_15P\n* TYPE_B_NEMA_5_15\n* TYPE_B_NEMA_5_20\n* TESLA_R\n* TESLA_S\n* TYPE_2_TETHERED",
                        "example": "TYPE_2_MENNEKES"
                    },
                    "costCenter": {
                        "title": "Cost center",
                        "type": "string",
                        "description": "The cost center. This is free text.",
                        "example": "B-CH"
                    },
                    "signaturePublicKey": {
                        "title": "Signature public key",
                        "type": "string",
                        "description": "The public key of the connector",
                        "example": "afe0884875c9c8fca9..."
                    },
                    "activeEvTransaction": {
                        "title": "Active EV transaction",
                        "type": "integer",
                        "description": "The active EV transaction",
                        "format": "int64",
                        "example": 11997
                    }
                }
            }
        },
        "securitySchemes": {
            "dmsTicket": {
                "type": "apiKey",
                "name": "dmsTicket",
                "in": "header"
            }
        }
    }
}
